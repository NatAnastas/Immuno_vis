[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to immunovisual, a collection of charts made with the R programming language, focusing on immunogenetics analyses. Different charts types are being organized into multiple sections, each accompanied by its reproducible code. The gallery spotlights the utilization of prominent R packages such as tidyverse, data.table, and ggplot2."
  },
  {
    "objectID": "index.html#who-is-the-site-intended-for",
    "href": "index.html#who-is-the-site-intended-for",
    "title": "Welcome",
    "section": "Who is the site intended for?",
    "text": "Who is the site intended for?\n\nBioscientists who try to find ideas of how to visualize their datasets\nBioinformaticians looking for visualization ideas, code or tricks"
  },
  {
    "objectID": "index.html#who-is-the-site-νοτ-intended-for",
    "href": "index.html#who-is-the-site-νοτ-intended-for",
    "title": "Welcome",
    "section": "Who is the site ΝΟΤ intended for?",
    "text": "Who is the site ΝΟΤ intended for?\n\nBioscientists/bioinformaticians who are trying to process their datasets\nBioscientists who are trying to visualize their datasets via an online platform"
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Welcome",
    "section": "Contributing",
    "text": "Contributing\nYour input is invaluable - whether it’s suggesting a new chart or reporting a bug, we welcome and greatly appreciate your feedback!\nFeel free to open a GitHub issue or contact us via inab.bioinformatics@lists.certh.gr."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Welcome",
    "section": "License",
    "text": "License\nThis work, as a whole, is licensed under the MIT license.\nThe code contained in this website is simultaneously available under the MIT license; this means that you are free to use it in your own packages, as long as you cite the source."
  },
  {
    "objectID": "index.html#authors",
    "href": "index.html#authors",
    "title": "Welcome",
    "section": "Authors",
    "text": "Authors\n Natasa Anastasiadou    Nikos Pechlivanis"
  },
  {
    "objectID": "qmd/color_palette.html",
    "href": "qmd/color_palette.html",
    "title": "Color palettes",
    "section": "",
    "text": "Below you can find a list of website helping you to find out different color palettes."
  },
  {
    "objectID": "qmd/color_palette.html#r-color-paletters",
    "href": "qmd/color_palette.html#r-color-paletters",
    "title": "Color palettes",
    "section": "R color paletters",
    "text": "R color paletters\nThe website features a collection of 497 palettes sourced from 16 R packages, categorized into continuous (30 samples), discrete, and dynamic palettes.\nThese palettes can be utilized with the paletteer package, as outlined in each palette’s description, or with their corresponding package. To select a specific color, users can copy the code by simply clicking on the desired color.\nContinuous palettes enable smooth transitions between colors, offering a diverse range of options. Discrete palettes consist of a fixed number of colors, whereas dynamic palettes, a subset of discrete palettes, can adapt to generate a variable number of colors as needed."
  },
  {
    "objectID": "qmd/color_palette.html#color-palette-helper",
    "href": "qmd/color_palette.html#color-palette-helper",
    "title": "Color palettes",
    "section": "Color Palette Helper",
    "text": "Color Palette Helper\nThe website is designed to assist users in creating custom color palettes.\nWith manual options available, users have the freedom to design their palettes according to their specific needs and preferences. They can select their preferred palette type, whether sequential or diverging, and adjust the number of colors to their needs. Following this, users have the option to choose and arrange the input colors. Τhen, they can subsequently review and adjust the resulting palette before exporting the color codes.\nAdditionally, the website provides information on whether the palette is colorblind-safe, ensuring inclusivity and accessibility in design choices."
  },
  {
    "objectID": "qmd/diversity.html",
    "href": "qmd/diversity.html",
    "title": "Diversity estimation",
    "section": "",
    "text": "Diversity estimation within immune cell populations is a fundamental analysis in immunoinformatics. Diversity estimation refers to the process of analyzing and quantifying the diversity of immune cells, such as T cells or B cells."
  },
  {
    "objectID": "qmd/diversity.html#diversity-indeces",
    "href": "qmd/diversity.html#diversity-indeces",
    "title": "Diversity estimation",
    "section": "Diversity indeces",
    "text": "Diversity indeces\nThe repDiversity function offers various approaches for estimating repertoire diversity. The method parameter allows users to specify the means for diversity estimation. Users can select one of the following methods to set the means for diversity estimation:\n\nshannon Shannon index takes into account both the number of different species and the distribution of individuals among those species, providing a single numerical value that reflects the diversity within a community. Higher Shannon index values indicate greater diversity.\nchao1 Chao1 is a nonparametric asymptotic estimator used to estimate species richness, which refers to the total number of species present in a population or community.\nhill Hill numbers represent a unified family of diversity indices characterized by a mathematical framework, with the only variation being the exponent q.\ndiv Div, known as true diversity or the effective number of types, represents the count of equally abundant types required for the average proportional abundance of the types to match that observed in the dataset of interest, where all types may not be equally abundant.\ngini.simp The Gini-Simpson index quantifies the probability of interspecific encounter, indicating the likelihood that two randomly selected entities within a community represent different types or species.\ninv.simp Inverse Simpson index represents the effective number of types achieved when the weighted arithmetic mean is utilized to quantify the average proportional abundance of types within the dataset of interest.\ngini The Gini coefficient measures the inequality among values in a frequency distribution, such as income levels. A Gini coefficient of zero signifies complete equality, where all values are identical (e.g., everyone has the same income). Conversely, a Gini coefficient of one, or 100%, represents maximum inequality among values (e.g., where one person possesses all the income).\nraref Rarefaction is a statistical technique used to estimate species richness based on sampled data by extrapolating the expected number of species in a population."
  },
  {
    "objectID": "qmd/diversity.html#table-data-format",
    "href": "qmd/diversity.html#table-data-format",
    "title": "Diversity estimation",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for diversity estimation visualizations. The table includes mock data specifically generated for this purpose.\nThe “Sample” column contains unique identifiers for each sample, while the “Group” column indicates the different groups to which the samples belong. The “Patient” column provides information about the respective patients associated with each sample. The “Shannon” column corresponds to the Shannon index utilized for the diversity analysis.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\ndf = fread(\"../inst/data/diversity1.txt\")\n\nreactable(\n  \n  df, \n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/diversity.html#boxplot",
    "href": "qmd/diversity.html#boxplot",
    "title": "Diversity estimation",
    "section": "Boxplot",
    "text": "Boxplot\nBoxplot is one of the most commonly used chart types for comparing the distribution of a numeric variable across multiple groups.\nIn a boxplot, the central line within the box represents the median of the data, dividing it into two equal parts. The edges of the box represent the upper and lower quartiles, while the extreme lines extend to the the highest and lowest values within the data range, excluding outliers.\nBoxplots are created using the geom_boxplot() function from the ggplot2 package.\n\nBoxplot 1\nIt’s important to note that while boxplots provide a summary of data distribution for each group, they may hide the underlying distribution details.\nTo address this concern, a common practice is to overlay individual data points using geom_point() behind the boxplot, offering a clearer visualization of the dataset’s distribution.\n\n\nCode\n# libraries -------\n\nlibrary(ggplot2)\nlibrary(ggforce)\n\nlibrary(paletteer)\n# plot 1 ---------------------\n\ndf |&gt;\n    ggplot(aes(Group, Shannon)) +\n    \n    geom_point(\n        aes(fill = Group),\n        position = position_jitternormal(sd_y = 0, sd_x = .08),\n        shape = 21, size = 2, stroke = .15, color = \"white\"\n    ) +\n\n    scale_fill_manual(values = paletteer_d(\"ggsci::hallmarks_light_cosmic\")) +\n    \n    geom_boxplot(width = .15, outlier.shape = NA) +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.position = \"none\",\n        \n        axis.line = element_line(linewidth = .55),\n        axis.ticks = element_line(linewidth = .55),\n        \n        panel.grid.major = element_line(linewidth = .55),\n        panel.grid.minor = element_line(linewidth = .45, linetype = \"dashed\"),\n        \n        plot.background = element_rect(fill = \"transparent\", color = NA),\n        plot.margin = margin(20, 20, 20, 20)\n    )\n\n\n\n\n\n\n\n\n\n\n\nBoxplot 2\nThe box plot illustrates the Shannon index on the y-axis with distinct patient groups depicted along the x-axis. Different colors are employed to distinguish between the two patient groups.\n\n\nCode\n# libraries ------------\n\nlibrary(ggnewscale)\nlibrary(colorspace)\n\n# plot 2 ------------\n\ndf |&gt;\n  ggplot(aes(Group, Shannon)) +\n    \n  geom_point(\n      aes(fill = Patient),\n      position = position_jitterdodge(jitter.width = .15, dodge.width = .5),\n      shape = 21, size = 2, stroke = .15, color = \"white\"\n  ) +\n\n  scale_fill_manual(values = paletteer_d(\"ggsci::hallmarks_light_cosmic\") |&gt; lighten(.25)) +\n\n  geom_boxplot(\n    aes(color = Patient),\n    position = position_dodge(width = .5),\n    width = .2, outlier.shape = NA\n  ) +\n  \n  scale_color_manual(values = paletteer_d(\"ggsci::hallmarks_light_cosmic\") |&gt; darken(.25)) +\n  \n  theme_minimal() +\n  \n  theme(\n      legend.position = \"bottom\",\n      legend.justification = \"left\",\n      legend.title = element_blank(),\n      \n      axis.line = element_line(linewidth = .55),\n      axis.ticks = element_line(linewidth = .55),\n      \n      panel.grid.major = element_line(linewidth = .55),\n      panel.grid.minor = element_line(linewidth = .45, linetype = \"dashed\"),\n      \n      plot.background = element_rect(fill = \"transparent\", color = NA),\n      plot.margin = margin(20, 20, 20, 20)\n  )"
  },
  {
    "objectID": "qmd/gene_repertoire.html",
    "href": "qmd/gene_repertoire.html",
    "title": "Gene repertoire",
    "section": "",
    "text": "The typical Ig repertoire comprises one immunoglobulin heavy chain (IGH) and two light chains, κ (IGK) and λ (IGL). Immunoglobulins undergo diversification through somatic recombination, randomly combining variable (V), diversity (D), and joining (J) gene segments."
  },
  {
    "objectID": "qmd/diversity.html#diversity-indeces",
    "href": "qmd/diversity.html#diversity-indeces",
    "title": "Diversity estimation",
    "section": "Diversity indeces",
    "text": "Diversity indeces\nThere are several approaches to the estimation of repertoire diversity implemented in the repDiversity function. The method parameter similarly to above mentioned functions sets the means for diversity estimation. You can choose one of the following methods:\n\nshannon Shannon index takes into account both the number of different species and the distribution of individuals among those species, providing a single numerical value that reflects the diversity within a community. Higher Shannon index values indicate greater diversity.\nchao1 Chao is a nonparameteric asymptotic estimator of species richness (number of species in a population).\nhill Hill numbers are a mathematically unified family of diversity indices (differing only by an exponent q).\ndiv true diversity, or the effective number of types, refers to the number of equally abundant types needed for the average proportional abundance of the types to equal that observed in the dataset of interest where all types may not be equally abundant.\ngini.simp The Gini-Simpson index is the probability of interspecific encounter, i.e., probability that two entities represent different types.\ninv.simp Inverse Simpson index is the effective number of types that is obtained when the weighted arithmetic mean is used to quantify average proportional abundance of types in the dataset of interest.\ngini The Gini coefficient measures the inequality among values of a frequency distribution (for example levels of income). A Gini coefficient of zero expresses perfect equality, where all values are the same (for example, where everyone has the same income). A Gini coefficient of one (or 100 percents ) expresses maximal inequality among values (for example where only one person has all the income).\nraref Rarefaction is a technique to assess species richness from the results of sampling through extrapolation."
  },
  {
    "objectID": "qmd/color_palette.html#r-color-paletters",
    "href": "qmd/color_palette.html#r-color-paletters",
    "title": "Color palettes",
    "section": "R color paletters",
    "text": "R color paletters\nThe website features a collection of 497 palettes sourced from 16 R packages, categorized into continuous (30 samples), discrete, and dynamic palettes.\nThese palettes can be utilized with the paletteer package, as outlined in each palette’s description, or with their corresponding package. To select a specific color, users can copy the code by simply clicking on the desired color.\nContinuous palettes enable smooth transitions between colors, offering a diverse range of options. Discrete palettes consist of a fixed number of colors, whereas dynamic palettes, a subset of discrete palettes, can adapt to generate a variable number of colors as needed."
  },
  {
    "objectID": "qmd/color_palette.html#chroma.js-color-palette-helper",
    "href": "qmd/color_palette.html#chroma.js-color-palette-helper",
    "title": "Color palettes",
    "section": "Chroma.js-Color Palette Helper",
    "text": "Chroma.js-Color Palette Helper\nThe site offers more manual options. Users can select their preferred palette type (sequential or diverging), then choose and arrange the input colors. They can subsequently review and adjust the resulting palette before exporting the color codes."
  },
  {
    "objectID": "qmd/gene_repertoire.html#table-data-format",
    "href": "qmd/gene_repertoire.html#table-data-format",
    "title": "Gene repertoire",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThese are examples of a tables containing the necessary informations for gene repertoire visualizations. The tables includes mock data specifically generated for this purpose."
  },
  {
    "objectID": "qmd/color_palette.html#color-palette-helper",
    "href": "qmd/color_palette.html#color-palette-helper",
    "title": "Color palettes",
    "section": "Color Palette Helper",
    "text": "Color Palette Helper\nThe website is designed to assist users in creating custom color palettes.\nWith manual options available, users have the freedom to design their palettes according to their specific needs and preferences. They can select their preferred palette type, whether sequential or diverging, and adjust the number of colors to their needs. Following this, users have the option to choose and arrange the input colors. Τhen, they can subsequently review and adjust the resulting palette before exporting the color codes.\nAdditionally, the website provides information on whether the palette is colorblind-safe, ensuring inclusivity and accessibility in design choices."
  },
  {
    "objectID": "qmd/V(D)J_recombination.html",
    "href": "qmd/V(D)J_recombination.html",
    "title": "V(D)J recombination",
    "section": "",
    "text": "V(D)J recombination stands as a fundamental mechanism within the adaptive immune system, crucial for formation of the immunoglobulins."
  },
  {
    "objectID": "qmd/V(D)J_recombination.html#table-data-format",
    "href": "qmd/V(D)J_recombination.html#table-data-format",
    "title": "V(D)J recombination",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for V(D)J recombination visualizations. The table includes mock data specifically generated for this purpose.\nThe “IGLJ” column contains the different IGLJ genes, while all the other columns correspond to the various IGLV genes.\n\n\nCode\nlibrary(readxl)\nlibrary(reactable)\n\ndf &lt;- read_excel(\"../inst/data/chordDiagram.xlsx\") |&gt;\n      as.data.frame()\n\n\nreactable(\n  \n  df, \n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/V(D)J_recombination.html#chord-diagram",
    "href": "qmd/V(D)J_recombination.html#chord-diagram",
    "title": "V(D)J recombination",
    "section": "Chord diagram",
    "text": "Chord diagram\nChord diagrams provide a circular visualization of relationships between multiple entities (nodes) through interconnected links.\nEach entity is represented by a segment on the outer perimeter of the circular layout, with arcs drawn between them to show connections.\nThe size of each arc corresponds to the significance of the flow between the respective entities.\nChord diagrams can be constructed using the chordDiagram() function from the circlize package.\n\nChord diagram 1\nThis chord diagram illustrates the different recombinations between IGLJ genes and IGLV genes.\n\n\nCode\nlibrary(readxl)\nlibrary(circlize)\nlibrary(data.table)\n\n\n# change df\nrownames(df) &lt;- df$IGLJ\ndf$IGLJ = NULL\ndf = as.matrix(df)\n\n\n\n# Define specific colors for names\ngrid.col1 = c(IGLJ3 = \"#D53E4F\",IGLJ2 = \"#5E4FA2\", IGLJ1 =\"#66C2A5\")\n\n# Define specific colors for the IGJV sectors\niglj_colors &lt;- c(IGLJ3 = \"#D53E4F\", IGLJ2 = \"#5E4FA2\", IGLJ1 =\"#66C2A5\")\n\n# Extract sector names from the data frame that start with \"IGJV\"\niglj_sectors &lt;- colnames(df)[startsWith(colnames(df), \"IGLJ\")]\n\n# Exclude sectors that are already in grid.col1\niglj_sectors &lt;- setdiff(iglj_sectors, names(grid.col1))\n\n\n\n# Assign specific colors to the IGJV sectors\nfor (i in seq_along(iglj_sectors)) {\n  grid.col1[iglj_sectors[i]] &lt;- iglj_colors[i]\n}\n\n\n# Extract entity names from the data frame that start with \"IGLV\"\niglv_entities &lt;- colnames(df)[startsWith(colnames(df), \"IGLV\")]\n\n# Exclude entities that are already in grid.col1\niglv_entities &lt;- setdiff(iglv_entities, names(grid.col1))\n\n\n\n# Assign them the color \"grey\"\nfor (entity in iglv_entities) {\n  grid.col1[entity] &lt;- \"grey10\"\n}\n\n\n# chord diagram\n# vertical symmetric\ncircos.clear()\ncircos.par(start.degree = -90)\n\n\n# empty track\nchordDiagram(df, grid.col = grid.col1, annotationTrack = c(\"grid\", \"names\"),\n             annotationTrackHeight = c(0.01, 0.001),\n             preAllocateTracks = list(track.height = 0.1))\n\n\n# customize labels\ncircos.track(track.index = 1, panel.fun = function(x, y) {\n  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, \n              facing = \"clockwise\", niceFacing = TRUE, adj = c(0, 0.5),\n              cex = 0.6)\n}, bg.border = NA)"
  },
  {
    "objectID": "qmd/clonotype_evolution.html",
    "href": "qmd/clonotype_evolution.html",
    "title": "Clonotype evolution",
    "section": "",
    "text": "Clonotype evolution refers to the dynamic changes that occur in the composition and characteristics of clonotypes over time or in response to selective pressures within a biological system, such as the immune repertoire."
  },
  {
    "objectID": "qmd/clonotype_evolution.html#boxplot",
    "href": "qmd/clonotype_evolution.html#boxplot",
    "title": "Clonotype evolution",
    "section": "Boxplot",
    "text": "Boxplot\nBoxplot is one of the most commonly used chart types for comparing the distribution of a numeric variable across multiple groups.\nIn a boxplot, the central line within the box represents the median of the data, dividing it into two equal parts. The edges of the box represent the upper and lower quartiles, while the extreme lines extend to the the highest and lowest values within the data range, excluding outliers.\nBoxplots are created using the geom_boxplot() function from the ggplot2 package.\n\nBoxplot 1\nIt’s important to note that while boxplots provide a summary of data distribution for each group, they may hide the underlying distribution details.\nTo address this concern, a common practice is to overlay individual data points using geom_point() behind the boxplot, offering a clearer visualization of the dataset’s distribution.\n\n\nCode\n# libraries -------\n\nlibrary(ggplot2)\nlibrary(ggforce)\n\nlibrary(paletteer)\n# plot 1 ---------------------"
  },
  {
    "objectID": "qmd/clonotype_evolution.html#plot",
    "href": "qmd/clonotype_evolution.html#plot",
    "title": "Clonotype evolution",
    "section": "plot",
    "text": "plot\n\nplot 1\n\n\nCode\n# libraries -------\n\nlibrary(ggplot2)\nlibrary(ggstream)\nlibrary(paletteer)\n\n\n# plot 1 ---------------------\n\nd1 |&gt; \n    ggplot(aes(time, Freq, fill = clonotype)) +\n    \n    # geom_stream(\n    #     geom = \"contour\",\n    #     color = \"grey20\",\n    #     linewidth = 2,\n    #     bw = .75,\n    #     extra_span = .75,\n    #     true_range = \"both\",\n    #     sorting = \"inside_out\"\n    # ) +\n    \n    geom_stream(\n        type = \"mirror\",\n        # geom = \"polygon\",\n        color = \"grey96\",\n        linewidth = .05,\n        bw = .75,\n        extra_span = .75,\n        true_range = \"both\",\n        sorting = \"inside_out\"\n    ) +\n    \n    geom_vline(\n        data = data.table(x = c(1, 2, 3, 4, 5)),\n        aes(xintercept = x),\n        color = \"white\", \n        linewidth = 1,\n        linetype = \"dotted\"\n    ) +\n    \n    scale_x_discrete(expand = c(0, 0)) +\n    scale_fill_manual(\n        values = paletteer_d(\"ggsci::hallmarks_light_cosmic\"),\n        guide = guide_legend(nrow = 4)\n    ) +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.position = \"bottom\",\n        legend.title.position = \"top\",\n        \n        axis.title.x = element_blank(),\n        axis.text.x = element_text(face = \"bold\"),\n        \n        panel.grid = element_blank(),\n        \n        plot.margin = margin(20, 20, 20, 20),\n        \n        plot.background = element_rect(fill = \"#d9e3f1\", color = NA)\n    )"
  },
  {
    "objectID": "qmd/clonotype_evolution.html#table-data-format",
    "href": "qmd/clonotype_evolution.html#table-data-format",
    "title": "Clonotype evolution",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for clonotype evolution visualizations. The table includes mock data specifically generated for this purpose.\nThe “patient” column identifies specific patients within the dataset. The “sample” column contains unique identifiers for each sample, while the “time” column indicates the different timepoint which each sample was taken. The “response” column provides information regarding the outcome associated with each sample. In the “vgene” column, various V genes are listed, while “CDR3” column contains the corresponding CDR3 sequences. The “clonotype” column represents different clonotypes, the “N” indicates the number of times each clonotype was detected and “Freq” column displays to the frequency of each clonotype.\n\n\nCode\nlibrary(stringr)\nlibrary(data.table)\nlibrary(reactable)\n\n\nd0 = fread(\"../inst/data/clonotype-evolution-1.tsv\")\n\nd0$time = d0$time |&gt; factor(levels = c(\"PRE\", \"6M\", \"12M\", \"18M\", \"24M\"))\n\nd1 = d0[which(patient == 13)]\n\ncl = d1[which(time == \"PRE\"), head(.SD, 10)]$clonotype\n\nd1 = d1[which(clonotype %in% cl)] \n\n\nreactable(\n\n  d1,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/clonotype_evolution.html#stream-graph",
    "href": "qmd/clonotype_evolution.html#stream-graph",
    "title": "Clonotype evolution",
    "section": "Stream graph",
    "text": "Stream graph\nA Stream graph is a variant of a stacked area chart that illustrates the progression of a numeric value (Y-axis) over another numeric value (X-axis). It visualizes this evolution across multiple groups, each distinguished by a unique color.\nThe following example shows the evolution of each colonotype through time within a single patient.\nStream graphs are created using the ggstream package. The geom_stream() function allows creating streamplots in ggplot2.\n\n\nCode\n# libraries -------\n\nlibrary(ggplot2)\nlibrary(ggstream)\nlibrary(paletteer)\n\n\n# plot 1 ---------------------\n\nd1 |&gt; \n    ggplot(aes(time, Freq, fill = clonotype)) +\n    \n    geom_stream(\n        type = \"mirror\",\n        color = \"grey96\",\n        linewidth = .05,\n        bw = .75,\n        extra_span = .75,\n        true_range = \"both\",\n        sorting = \"inside_out\"\n    ) +\n    \n    geom_vline(\n        data = data.table(x = c(1, 2, 3, 4, 5)),\n        aes(xintercept = x),\n        color = \"white\", \n        linewidth = 1,\n        linetype = \"dotted\"\n    ) +\n    \n    scale_x_discrete(expand = c(0, 0)) +\n    scale_fill_manual(\n        values = paletteer_d(\"ggsci::hallmarks_light_cosmic\"),\n        guide = guide_legend(nrow = 4)\n    ) +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.position = \"bottom\",\n        legend.title.position = \"top\",\n        \n        axis.title.x = element_blank(),\n        axis.text.x = element_text(face = \"bold\"),\n        \n        panel.grid = element_blank(),\n        \n        plot.margin = margin(20, 20, 20, 20),\n        \n        plot.background = element_rect(fill = \"#d9e3f1\", color = NA)\n    )"
  },
  {
    "objectID": "qmd/clonotype_evolution.html#stream-graph-1",
    "href": "qmd/clonotype_evolution.html#stream-graph-1",
    "title": "Clonotype evolution",
    "section": "Stream graph",
    "text": "Stream graph\nA Stream graph is a variant of a stacked area chart that illustrates the progression of a numeric value (Y-axis) over another numeric value (X-axis). It visualizes this evolution across multiple groups, each distinguished by a unique color.\nThe following example shows the evolution of each colonotype through time within a single patient.\n\n\nCode\n# libraries -------\n\nlibrary(ggplot2)\nlibrary(ggstream)\nlibrary(paletteer)\n\n\n# plot 1 ---------------------\n\nd1 |&gt; \n    ggplot(aes(time, Freq, fill = clonotype)) +\n    \n    geom_stream(\n        type = \"mirror\",\n        color = \"grey96\",\n        linewidth = .05,\n        bw = .75,\n        extra_span = .75,\n        true_range = \"both\",\n        sorting = \"inside_out\"\n    ) +\n    \n    geom_vline(\n        data = data.table(x = c(1, 2, 3, 4, 5)),\n        aes(xintercept = x),\n        color = \"white\", \n        linewidth = 1,\n        linetype = \"dotted\"\n    ) +\n    \n    scale_x_discrete(expand = c(0, 0)) +\n    scale_fill_manual(\n        values = paletteer_d(\"ggsci::hallmarks_light_cosmic\"),\n        guide = guide_legend(nrow = 4)\n    ) +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.position = \"bottom\",\n        legend.title.position = \"top\",\n        \n        axis.title.x = element_blank(),\n        axis.text.x = element_text(face = \"bold\"),\n        \n        panel.grid = element_blank(),\n        \n        plot.margin = margin(20, 20, 20, 20),\n        \n        plot.background = element_rect(fill = \"#d9e3f1\", color = NA)\n    )"
  },
  {
    "objectID": "qmd/clonotype_evolution.html#heatmap",
    "href": "qmd/clonotype_evolution.html#heatmap",
    "title": "Clonotype evolution",
    "section": "Heatmap",
    "text": "Heatmap\nA heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors.\n\n\nCode\nsuppressPackageStartupMessages(library(ComplexHeatmap))\n\nlibrary(data.table)\nlibrary(stringr)\n\nexpr = readRDS(system.file(package = \"ComplexHeatmap\", \"extdata\", \"gene_expression.rds\"))\n\nc_s = data.table(\n    \"sample\" = expr[, 1:24] |&gt; colnames(),\n    \"cell\" = expr[, 1:24] |&gt; colnames() |&gt; str_split_i(\"_\", 2)\n)\n\nm = expr[, 1:24] |&gt; as.matrix() |&gt; t() |&gt; scale(scale = TRUE, center = TRUE) |&gt; t()\nr_s = expr[, c(25, 26, 27)]\n\ncol_ann = HeatmapAnnotation(\n    \"cell\" = c_s$cell,\n    simple_anno_size = unit(.75, \"lines\"),\n    col = list(\n        cell = c(\n            \"cell01\" = \"#358DB9\", \n            \"cell02\" = \"#CF4E9C\", \n            \"cell03\" = \"#2E2A2B\"\n        )\n    )\n)\n\nrow_ann = rowAnnotation(\n    \"Type\" = r_s$type,\n    simple_anno_size = unit(.75, \"lines\"),\n    col = list(\n        Type = c(\n            \"protein_coding\" = \"#358DB9\", \n            \"antisense\" = \"#CF4E9C\", \n            \"pseudogene\" = \"#2E2A2B\",\n            \"others\" = \"#2F509E\"\n        )\n    )\n)\n\n\nht = Heatmap(\n    m, name = \"Repertoire\",\n    \n    border = TRUE,\n    \n    left_annotation = row_ann,\n    top_annotation = col_ann,\n    \n    row_split = 3, column_split = 3,\n    \n    clustering_distance_rows = \"euclidean\", \n    clustering_distance_columns = \"euclidean\",\n    \n    clustering_method_rows = \"ward.D2\",\n    clustering_method_columns = \"ward.D2\",\n    \n    row_names_gp = gpar(fontsize = 6)\n    \n) \n\n  \ndraw(ht, merge_legends = TRUE, background = \"#d9e3f1\")"
  },
  {
    "objectID": "qmd/gene_repertoire.html#heatmap",
    "href": "qmd/gene_repertoire.html#heatmap",
    "title": "Gene repertoire",
    "section": "Heatmap",
    "text": "Heatmap\nA heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors.\nThe heatmap() function is a built-in feature of R, providing a powerful tool for generating high-quality heatmaps from matrices. It includes statistical functionalities to normalize input data, perform clustering algorithms and visualize the results\n\n\nCode\nlibrary(ComplexHeatmap)\n\nlibrary(data.table)\nlibrary(stringr)\n\ncol_ann = HeatmapAnnotation(\n    \"cell\" = c_s$cell,\n    simple_anno_size = unit(.75, \"lines\"),\n    col = list(\n        cell = c(\n            \"cell01\" = \"#358DB9\", \n            \"cell02\" = \"#CF4E9C\", \n            \"cell03\" = \"#2E2A2B\"\n        )\n    )\n)\n\nrow_ann = rowAnnotation(\n    \"Type\" = r_s$type,\n    simple_anno_size = unit(.75, \"lines\"),\n    col = list(\n        Type = c(\n            \"protein_coding\" = \"#358DB9\", \n            \"antisense\" = \"#CF4E9C\", \n            \"pseudogene\" = \"#2E2A2B\",\n            \"others\" = \"#2F509E\"\n        )\n    )\n)\n\n\nHeatmap(\n    m, name = \"Repertoire\",\n    \n    border = TRUE,\n    \n    left_annotation = row_ann,\n    top_annotation = col_ann,\n    \n    row_split = 3, column_split = 3,\n    \n    clustering_distance_rows = \"euclidean\", \n    clustering_distance_columns = \"euclidean\",\n    \n    clustering_method_rows = \"ward.D2\",\n    clustering_method_columns = \"ward.D2\",\n    \n    row_names_gp = gpar(fontsize = 6)\n    \n) |&gt; \n  draw(merge_legends = TRUE, background = \"transparent\")"
  },
  {
    "objectID": "qmd/gene_repertoire.html#table-1",
    "href": "qmd/gene_repertoire.html#table-1",
    "title": "Gene repertoire",
    "section": "Table 1",
    "text": "Table 1\n\n\nCode\nlibrary(stringr)\nlibrary(data.table)\nlibrary(reactable)\n\n\nc_s = fread(\"../inst/data/c_s.txt\")\n\nreactable(\n\n  c_s,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/gene_repertoire.html#table-2",
    "href": "qmd/gene_repertoire.html#table-2",
    "title": "Gene repertoire",
    "section": "Table 2",
    "text": "Table 2\n\n\nCode\nm = fread(\"../inst/data/m.txt\") |&gt; as.matrix()\n\n\nreactable(\n\n  m,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/gene_repertoire.html#table-3",
    "href": "qmd/gene_repertoire.html#table-3",
    "title": "Gene repertoire",
    "section": "Table 3",
    "text": "Table 3\n\n\nCode\nr_s = fread(\"../inst/data/r_s.txt\")\n\n\nreactable(\n\n  r_s,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/clonotype_evolution.html#stream-plot",
    "href": "qmd/clonotype_evolution.html#stream-plot",
    "title": "Clonotype evolution",
    "section": "Stream plot",
    "text": "Stream plot\nA Stream plot is a variant of a stacked area chart that illustrates the progression of a numeric value (Y-axis) over another numeric value (X-axis). It visualizes this evolution across multiple groups, each distinguished by a unique color.\nStream plots are created using the ggstream package. The geom_stream() function allows creating streamplots in ggplot2.\nThe following example shows the evolution of each colonotype through time within a single patient.\n\n\nCode\n# libraries -------\n\nlibrary(ggplot2)\nlibrary(ggstream)\nlibrary(paletteer)\n\n\n# plot 1 ---------------------\n\nd1 |&gt; \n    ggplot(aes(time, Freq, fill = clonotype)) +\n    \n    geom_stream(\n        type = \"mirror\",\n        color = \"grey96\",\n        linewidth = .05,\n        bw = .75,\n        extra_span = .75,\n        true_range = \"both\",\n        sorting = \"inside_out\"\n    ) +\n    \n    geom_vline(\n        data = data.table(x = c(1, 2, 3, 4, 5)),\n        aes(xintercept = x),\n        color = \"white\", \n        linewidth = 1,\n        linetype = \"dotted\"\n    ) +\n    \n    scale_x_discrete(expand = c(0, 0)) +\n    scale_fill_manual(\n        values = paletteer_d(\"ggsci::hallmarks_light_cosmic\"),\n        guide = guide_legend(nrow = 4)\n    ) +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.position = \"bottom\",\n        legend.title.position = \"top\",\n        \n        axis.title.x = element_blank(),\n        axis.text.x = element_text(face = \"bold\"),\n        \n        panel.grid = element_blank(),\n        \n        plot.margin = margin(20, 20, 20, 20),\n        \n        plot.background = element_rect(fill = \"transparent\", color = NA)\n    )"
  },
  {
    "objectID": "qmd/clonality.html",
    "href": "qmd/clonality.html",
    "title": "Clonality",
    "section": "",
    "text": "Clonality in immune cells refers to the proliferation of genetically identical cells derived from a single ancestor cell."
  },
  {
    "objectID": "qmd/clonality.html#table-data-format",
    "href": "qmd/clonality.html#table-data-format",
    "title": "Clonality",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for clonality visualizations. The table includes mock data specifically generated for this purpose.\n\n\nCode\nlibrary(data.table)\nlibrary(stringr)\nlibrary(reactable)\n\ndf1 &lt;- fread(\"../inst/data/clonality1.txt\") \n\n\nreactable(\n  \n  df1, \n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/clonality.html#stream-plot",
    "href": "qmd/clonality.html#stream-plot",
    "title": "Clonality",
    "section": "Stream plot",
    "text": "Stream plot\nA Stream plot is a variant of a stacked area chart that illustrates the progression of a numeric value (Y-axis) over another numeric value (X-axis). It visualizes this evolution across multiple groups, each distinguished by a unique color.\nStream plots are created using the ggstream package. The geom_stream() function allows creating streamplots in ggplot2.\nThe following example shows the evolution of each colonotype through time within a single patient.\n\n\nCode\n# libraries -------\nlibrary(packcircles)\nlibrary(ggplot2)\nlibrary(shadowtext)\n\n\n\ndf1 = df1 |&gt; split(by = c(\"group1\", \"group2\"))\n\n\n\ndf_plot = df1 |&gt; \n  lapply(function(q) {\n    \n    dat.egg &lt;- q$clonality |&gt; \n      circleProgressiveLayout() |&gt; \n      circleLayoutVertices(npoints = 100)\n    \n    dat.egg &lt;- cbind(dat.egg, q[dat.egg$id]) \n    \n    return(dat.egg)\n    \n  }) |&gt;\n  \n  rbindlist()\n\n\n\ndf_plot$group1 = df_plot$group1 |&gt; str_to_upper()\n\ndf_plot_l = df_plot[, by = .(sample, group1, group2, clonality, id), .(\n  x = ( min(x) + max(x) ) / 2,\n  y = ( min(y) + max(y) ) / 2\n)]\n\ndf_plot_l$lbl = df_plot_l$clonality |&gt; round(digits = 2) |&gt; paste0(\"%\")\n\n\n\ndf_plot |&gt;\n  ggplot(aes(x, y, group = id)) +\n  geom_polygon(aes(fill = clonality), color = \"grey30\", linewidth = .25) +\n  \n  geom_shadowtext(\n    data = df_plot_l[which(clonality &gt;= 10)], inherit.aes = FALSE,\n    aes(x, y, label = lbl, size = clonality),  \n    color = \"grey1\", bg.color = \"#d9e3f1\", bg.r = .15\n  ) +\n  \n  scale_fill_stepsn(\n    colors = c('#00429d', '#73a2c6', '#ffffe0', '#f4777f', '#93003a'),\n    limits = c(0, 100),\n    guide = guide_colorbar(\n      title.position = \"left\",\n      title.theme = element_text(angle = 90, hjust = 0),\n      barheight = unit(10, \"lines\"),\n      barwidth = unit(.5, \"lines\")\n    )\n  ) +\n  \n  scale_size_continuous(guide = \"none\", range = c(1, 4)) +\n  \n  facet_grid(rows = vars(group2), cols = vars(group1), switch = \"y\") +\n  \n  coord_equal() +\n  \n  theme_minimal() +\n  \n  theme(\n    strip.text.x.top = element_text(face = \"bold\", margin = margin(b = 10)),\n    strip.text.y.left = element_text(face = \"bold\", margin = margin(r = 10)),\n    \n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    \n    panel.spacing = unit(1, \"lines\"),\n    \n    panel.grid.major = element_line(linewidth = .35),\n    panel.grid.minor = element_line(linewidth = .25, linetype = \"dashed\"),\n    \n    plot.margin = margin(20, 20, 20, 20),\n    \n    plot.background = element_rect(fill = \"#d9e3f1\", color = NA)\n    \n  )"
  },
  {
    "objectID": "qmd/clonality.html#circular-packing",
    "href": "qmd/clonality.html#circular-packing",
    "title": "Clonality",
    "section": "Circular Packing",
    "text": "Circular Packing\nThe packcircles package is the optimal choice for constructing circular packing charts in R.\nIt efficiently calculates the position of each bubble, facilitating the creation of these charts using ggplot2.\n\n\nCode\n# libraries -------\n\nlibrary(packcircles)\nlibrary(ggplot2)\nlibrary(shadowtext)\n\n\n\ndf1 = df1 |&gt; split(by = c(\"group1\", \"group2\"))\n\n\n\ndf_plot = df1 |&gt; \n  lapply(function(q) {\n    \n    dat.egg &lt;- q$clonality |&gt; \n      circleProgressiveLayout() |&gt; \n      circleLayoutVertices(npoints = 100)\n    \n    dat.egg &lt;- cbind(dat.egg, q[dat.egg$id]) \n    \n    return(dat.egg)\n    \n  }) |&gt;\n  \n  rbindlist()\n\n\n\ndf_plot$group1 = df_plot$group1 |&gt; str_to_upper()\n\ndf_plot_l = df_plot[, by = .(sample, group1, group2, clonality, id), .(\n  x = ( min(x) + max(x) ) / 2,\n  y = ( min(y) + max(y) ) / 2\n)]\n\ndf_plot_l$lbl = df_plot_l$clonality |&gt; round(digits = 2) |&gt; paste0(\"%\")\n\n\n\ndf_plot |&gt;\n  ggplot(aes(x, y, group = id)) +\n  geom_polygon(aes(fill = clonality), color = \"grey30\", linewidth = .25) +\n  \n  geom_shadowtext(\n    data = df_plot_l[which(clonality &gt;= 10)], inherit.aes = FALSE,\n    aes(x, y, label = lbl, size = clonality),  \n    color = \"grey1\", bg.color = \"#d9e3f1\", bg.r = .15\n  ) +\n  \n  scale_fill_stepsn(\n    colors = c('#00429d', '#73a2c6', '#ffffe0', '#f4777f', '#93003a'),\n    limits = c(0, 100),\n    guide = guide_colorbar(\n      title.position = \"left\",\n      title.theme = element_text(angle = 90, hjust = 0),\n      barheight = unit(10, \"lines\"),\n      barwidth = unit(.5, \"lines\")\n    )\n  ) +\n  \n  scale_size_continuous(guide = \"none\", range = c(1, 4)) +\n  \n  facet_grid(rows = vars(group2), cols = vars(group1), switch = \"y\") +\n  \n  coord_equal() +\n  \n  theme_minimal() +\n  \n  theme(\n    strip.text.x.top = element_text(face = \"bold\", margin = margin(b = 10)),\n    strip.text.y.left = element_text(face = \"bold\", margin = margin(r = 10)),\n    \n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    \n    panel.spacing = unit(1, \"lines\"),\n    \n    panel.grid.major = element_line(linewidth = .35),\n    panel.grid.minor = element_line(linewidth = .25, linetype = \"dashed\"),\n    \n    plot.margin = margin(20, 20, 20, 20),\n    \n    plot.background = element_rect(fill = \"transparent\", color = NA)\n    \n  )"
  },
  {
    "objectID": "qmd/volcano_plot.html",
    "href": "qmd/volcano_plot.html",
    "title": "Volcano plots",
    "section": "",
    "text": "A volcano plot is a specific type of scatter plot used to visualize the differential expression of features, such as genes.\nIn this plot, genes with the highest upregulation are positioned towards the right, those with the most downregulation are towards the left, and the genes with the greatest statistical significance are positioned towards the top."
  },
  {
    "objectID": "qmd/volcano_plot.html#table-data-format",
    "href": "qmd/volcano_plot.html#table-data-format",
    "title": "Volcano plots",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of table containing the necessary information for Volcano plot visualizations.\nThe table include mock data specifically generated for this purpose.\nThis is a table with the results from the DESeq2 analysis, an R package commonly utilized for differential gene expression analysis from RNA-Seq data. The analysis involves normalization, estimation of dispersion, and statistical testing to identify significantly differentially expressed genes.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/DESeq2_analysis.txt\")\ndf = df[, c(\"GeneID\", \"log2FoldChange\", \"padj\", \"-log10(padj)\",  \"ann\")]\n\n\nreactable(\n  \n  df,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/volcano_plot.html#volcano-plot",
    "href": "qmd/volcano_plot.html#volcano-plot",
    "title": "Volcano plots",
    "section": "Volcano plot",
    "text": "Volcano plot\nIn this volcano plot the x-axis represents the fold change, while the y-axis represents the adjusted p-value (padj).\nThe volcano plot can be generated using the ggplot2 package along with the geom_point() function.\n\n\nCode\nlibrary(stringr)\nlibrary(ggplot2)\n\nlibrary(ggrepel)\nlibrary(colorspace)\n\n# filter for top10 up and down regelated genes\ndf2 = df[which(padj &lt;= .05)]\n\ndf2 = df2[order( abs(log2FoldChange), decreasing = TRUE )]\n\ndf2 = df2[, by = ann, head(.SD, 10) ]\n\nindex = df2$ann |&gt; str_detect(\"low\", negate = TRUE) |&gt; which()\ndf2 = df2[index]\n\n\n# plot\nggplot(data = df) +\n    \n    geom_point(aes(x = log2FoldChange, y = -log10(padj), fill = ann),\n               shape = 21, stroke = NA, size = 2, alpha = .5) +\n    \n    geom_vline(xintercept = c(-1, 1), linewidth = .3, linetype = \"dashed\") +\n    geom_hline(yintercept = -log10(.05), linewidth = .3, linetype = \"dashed\") +\n    \n    geom_point(data = df2, aes(x = log2FoldChange, y = -log10(padj), fill = ann), \n               shape = 21, stroke = .15, size = 2, color = \"white\") +\n    \n    geom_label_repel(\n        data = df2, aes(x = log2FoldChange, y = -log10(padj), label = GeneID),\n        max.overlaps = Inf, label.size = NA, fill = \"transparent\",\n        fontface = \"bold\", size = 3\n    ) +\n    \n    scale_fill_manual(\n        values = c(\n            \"Up regulated\" = \"#990000\",\n            \"Up regulated (low)\" = lighten(\"#990000\", 0.5),\n\n            \"Down regulated\" = \"#004d99\",\n            \"Down regulated (low)\" = lighten(\"#004d99\", 0.5),\n\n            \"Not significant\" = \"grey\"\n        ),\n\n        breaks = c(\"Up regulated\", \"Not significant\", \"Down regulated\"),\n\n        guide = guide_legend(\n            override.aes = list(size = 3, alpha = 1)\n        ),\n\n    ) +\n    \n    # scale_x_continuous(trans = scales::pseudo_log_trans()) +\n    scale_y_continuous(expand = c(0, 0), breaks = c(2, 5, 10, 20, 30, 40),\n                       trans = scales::pseudo_log_trans()) +\n    \n    coord_cartesian(clip = \"off\") +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        \n        # axis.title = element_text(size = 14),\n        # axis.text = element_text(size = 14),\n        \n        axis.line = element_line(linewidth = .3, color = \"black\"),\n        axis.ticks = element_line(linewidth = .3, color = \"black\"),\n        \n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(linewidth = .3, linetype = \"dashed\", color = \"grey85\"),\n        \n        plot.margin = margin(20, 20, 20, 20),\n        \n        #plot.background = element_rect(fill = \"transparent\", color = NA)\n    ) +\n    \n    labs(y = \"-log10(padj)\", x = \"log2(Fold Change)\")"
  },
  {
    "objectID": "qmd/volcano_plot.html#table-1-data-format",
    "href": "qmd/volcano_plot.html#table-1-data-format",
    "title": "Volcano plots",
    "section": "",
    "text": "This is an example of a data format containing the necessary information for V(D)J recombination visualizations. The table includes mock data specifically generated for this purpose.\n\n\nCode\n#install.packages(\"svglite\")\nlibrary(data.table)\nlibrary(stringr)\n\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/DESeq2_analysis.txt\")\n\n\nreactable(\n  \n  df,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/volcano_plot.html#table-2-data-format",
    "href": "qmd/volcano_plot.html#table-2-data-format",
    "title": "Volcano plots",
    "section": "Table 2 (Data format)",
    "text": "Table 2 (Data format)\n\n\nCode\n#install.packages(\"svglite\")\nlibrary(data.table)\nlibrary(stringr)\n\nlibrary(reactable)\n\ndf2 &lt;- fread(\"../inst/data/Top_10_up_and_down_regulated.txt\")\n\n\nreactable(\n  \n  df2,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/volcano_plot.html#table-1",
    "href": "qmd/volcano_plot.html#table-1",
    "title": "Volcano plots",
    "section": "Table 1",
    "text": "Table 1\nThis is a table with the results from the DESeq2 analysis, an R package commonly utilized for differential gene expression analysis from RNA-Seq data. The analysis involves normalization, estimation of dispersion, and statistical testing to identify significantly differentially expressed genes.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/DESeq2_analysis.txt\")\ndf = df[, c(\"GeneID\", \"log2FoldChange\", \"padj\", \"-log10(padj)\",  \"ann\")]\n\n\nreactable(\n  \n  df,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/volcano_plot.html#table-2",
    "href": "qmd/volcano_plot.html#table-2",
    "title": "Volcano plots",
    "section": "Table 2",
    "text": "Table 2\nThis table presents the top 10 upregulated and downregulated genes based on differential expression analysis of the RNA-Seq data provided above.\n\n\nCode\n# library(data.table)\n# library(reactable)\n# \n# df2 &lt;- fread(\"../inst/data/Top_10_up_and_down_regulated.txt\")\n# \n# df2 = df2[, c(\"GeneID\", \"log2FoldChange\", \"padj\", \"-log10(padj)\",  \"ann\")]\n# \n# \n# reactable(\n#   \n#   df2,\n#   defaultPageSize = 5,\n#   theme = reactableTheme(\n#     backgroundColor  = \"#d9e3f1\"\n#   )\n# )"
  },
  {
    "objectID": "qmd/volcano_plot.html#expand-to-learn-about-collapse",
    "href": "qmd/volcano_plot.html#expand-to-learn-about-collapse",
    "title": "Volcano plots",
    "section": "Expand To Learn About Collapse",
    "text": "Expand To Learn About Collapse\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "objectID": "qmd/volcano_plot.html#table",
    "href": "qmd/volcano_plot.html#table",
    "title": "Volcano plots",
    "section": "Table",
    "text": "Table\n\n\nCode\nreactable(\n  \n  df,\n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/pathway_diagram.html",
    "href": "qmd/pathway_diagram.html",
    "title": "Pathway diagram",
    "section": "",
    "text": "A biological pathway outlines the sequence of molecular interactions within a cell that result in a specific outcome or change in the cell."
  },
  {
    "objectID": "qmd/pathway_diagram.html#table-data-format",
    "href": "qmd/pathway_diagram.html#table-data-format",
    "title": "Pathway diagram",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for pathway diagram visualizations. The table includes mock data specifically generated for this purpose.\nThe “Description” column contains the names of the pathways and the “geneID” column corresponds to the various genes associated with each pathway.\n\n\nCode\nlibrary(data.table)\nlibrary(stringr)\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/pathway_diagram.txt\")\n\n\nreactable(\n  \n  df, \n  defaultPageSize = 2,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/pathway_diagram.html#chord-diagram",
    "href": "qmd/pathway_diagram.html#chord-diagram",
    "title": "Pathway map",
    "section": "Chord diagram",
    "text": "Chord diagram\nChord diagrams provide a circular visualization of relationships between multiple entities (nodes) through interconnected links.\nEach entity is represented by a segment on the outer perimeter of the circular layout, with arcs drawn between them to show connections.\nThe size of each arc corresponds to the significance of the flow between the respective entities.\nChord diagrams can be constructed using the chordDiagram() function from the circlize package.\n\nChord diagram 1\nThis chord diagram illustrates the different recobinations between IGLJ genes and IGLV genes.\n\n\nCode\nlibrary(readxl)\nsuppressPackageStartupMessages(library(circlize))\nlibrary(data.table)\n\n\n# import data\ndf &lt;- read_excel(\"../inst/data/chordDiagram.xlsx\") |&gt;\n      as.data.frame()\n\n\n# change df\nrownames(df) &lt;- df$IGLJ\ndf$IGLJ = NULL\ndf = as.matrix(df)\n\n\n\n# Define specific colors for names\ngrid.col1 = c(IGLJ3 = \"#D53E4F\",IGLJ2 = \"#5E4FA2\", IGLJ1 =\"#66C2A5\")\n\n# Define specific colors for the IGJV sectors\niglj_colors &lt;- c(IGLJ3 = \"#D53E4F\", IGLJ2 = \"#5E4FA2\", IGLJ1 =\"#66C2A5\")\n\n# Extract sector names from the data frame that start with \"IGJV\"\niglj_sectors &lt;- colnames(df)[startsWith(colnames(df), \"IGLJ\")]\n\n# Exclude sectors that are already in grid.col1\niglj_sectors &lt;- setdiff(iglj_sectors, names(grid.col1))\n\n\n\n# Assign specific colors to the IGJV sectors\nfor (i in seq_along(iglj_sectors)) {\n  grid.col1[iglj_sectors[i]] &lt;- iglj_colors[i]\n}\n\n\n# Extract entity names from the data frame that start with \"IGLV\"\niglv_entities &lt;- colnames(df)[startsWith(colnames(df), \"IGLV\")]\n\n# Exclude entities that are already in grid.col1\niglv_entities &lt;- setdiff(iglv_entities, names(grid.col1))\n\n\n\n# Assign them the color \"grey\"\nfor (entity in iglv_entities) {\n  grid.col1[entity] &lt;- \"grey10\"\n}\n\n\n# chord diagram\n# vertical symmetric\ncircos.clear()\ncircos.par(start.degree = -90)\n\n\n# empty track\nchordDiagram(df, grid.col = grid.col1, annotationTrack = c(\"grid\", \"names\"),\n             annotationTrackHeight = c(0.01, 0.001),\n             preAllocateTracks = list(track.height = 0.1))\n\n\n# customize labels\ncircos.track(track.index = 1, panel.fun = function(x, y) {\n  circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, \n              facing = \"clockwise\", niceFacing = TRUE, adj = c(0, 0.5),\n              cex = 0.6)\n}, bg.border = NA)"
  },
  {
    "objectID": "qmd/pathway_diagram.html#pathway-diagram",
    "href": "qmd/pathway_diagram.html#pathway-diagram",
    "title": "Pathway diagram",
    "section": "Pathway diagram",
    "text": "Pathway diagram\nPathway diagrams visualize the interconnected molecular events.\nEach black dot represents a pathway, whereas each orange dot represents the different genes associated with that pathway.\nThe size of each black dot corresponds to the number of connections within that pathway.\nPathway diagrams can be constructed using the geom_edge_link() and geom_node_point() functions from the ggraph package.\n\n\nCode\nlibrary(tidygraph)\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(ggraph)\nlibrary(ggnewscale)\nlibrary(shadowtext)\n\nlibrary(extrafont)\n\n\n# plot\nq &lt;- df$geneID |&gt; \n    str_split(\"\\\\/\") |&gt; \n    lapply(function(x) { data.table(\"to\" = x) }) |&gt; \n    rbindlist(idcol = \"from\")\n\nq$from &lt;- df[q$from]$Description \n\nlayout &lt;- q |&gt;\n    as_tbl_graph() |&gt; \n    mutate(Degree = centrality_degree(mode = 'all')) |&gt;\n    create_layout(layout = 'igraph', algorithm = 'kk')\n\nlayout$Level &lt;- ifelse(layout$name %in% q$to, \"Gene\", \"Term\")\nlayout$name &lt;- layout$name |&gt; str_wrap(width = 15)\n\n\n\nggraph(layout) + \n    \n    geom_edge_link(color = \"#97A1A7\", edge_width = .3) + \n    \n    geom_node_point(\n        aes(size = Degree, fill = Level), shape = 21,\n        stroke = .2, color = \"grey96\"\n    ) + \n    \n    scale_size_continuous(\n        range = c(4, 12), \n        guide = guide_legend(\n            title = \"No. of connections\",\n            override.aes = list(color = \"grey10\", stroke = .35)\n        )\n    ) +\n    \n    scale_fill_manual(\n        values = c(\n            \"Term\" = \"#2E2A2B\",\n            \"Gene\" = \"#DC9445\"\n        ),\n        guide = \"none\" \n    ) +\n    \n\n    new_scale(\"size\") +\n    \n    geom_text_repel(\n        aes(x, y, label = name, size = Degree),\n        family = \"Calibri\", fontface = \"bold\", \n        color = \"grey10\", bg.color = \"grey96\", bg.r = 0.075,\n        segment.linetype = \"dotted\", segment.size = .2,\n        max.overlaps = Inf\n    ) +\n\n    scale_size_continuous(range = c(3, 4), guide = \"none\") +\n    \n    theme_graph(base_family = \"Calibri\") +\n    \n    theme(\n        legend.position = c(.95, .1),\n        legend.title.position = \"top\",\n        plot.margin = margin(20, 20, 20, 20),\n        plot.background = element_rect(fill = \"transparent\", color = NA)\n\n    )"
  },
  {
    "objectID": "qmd/PCA.html",
    "href": "qmd/PCA.html",
    "title": "PCA",
    "section": "",
    "text": "Principal Component Analysis (PCA) serves as a dimensionality reduction technique, condensing large datasets into a smaller set while retaining essential patterns and trends."
  },
  {
    "objectID": "qmd/PCA.html#table-data-format",
    "href": "qmd/PCA.html#table-data-format",
    "title": "PCA",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for PCA visualizations. The table includes mock data specifically generated for this purpose.\nThe “Sample” column contains unique identifiers for each sample. The “PC1” and “PC2” columns represent the results from the Principal Component Analysis. In the “Group” column there are different groups that the samples are being divided into.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/PCA_table.txt\")\n\n\nreactable(\n  \n  df, \n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/PCA.html#chord-diagram",
    "href": "qmd/PCA.html#chord-diagram",
    "title": "PCA",
    "section": "Chord diagram",
    "text": "Chord diagram\nChord diagrams provide a circular visualization of relationships between multiple entities (nodes) through interconnected links.\nEach entity is represented by a segment on the outer perimeter of the circular layout, with arcs drawn between them to show connections.\nThe size of each arc corresponds to the significance of the flow between the respective entities.\nChord diagrams can be constructed using the chordDiagram() function from the circlize package.\n\nChord diagram 1\nThis chord diagram illustrates the different recobinations between IGLJ genes and IGLV genes.\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggsci)\nlibrary(ggforce)\nlibrary(colorspace)\n\n\nggplot(df, aes(PC1, PC2)) +\n  \n  geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(3, \"mm\"), label.fill = \"transparent\") +\n  \n  geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = \"white\") +\n  \n  scale_fill_manual(\n    values = c(\n      \"IgM\" = \"#990000\",\n      \"IgG\" = \"#004d99\"\n      \n    )\n  ) +\n  \n  scale_x_continuous(limits = c(-55, 55)) +\n  scale_y_continuous(limits = c(-55, 55)) +\n  \n  theme_minimal() +\n  \n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  \n  labs(x = \"PC1 (46.19%)\", y = \"PC2 (10.93%)\")"
  },
  {
    "objectID": "qmd/PCA.html#pca-diagram",
    "href": "qmd/PCA.html#pca-diagram",
    "title": "PCA",
    "section": "PCA diagram",
    "text": "PCA diagram\nPCA diagrams can be constructed using the geom_mark_ellipse() function from the ggforce package.\nThis geom facilitates annotating sets of points using ellipses.\nThe enclosing ellipses are evaluated via the Khachiyan algorithm, ensuring a solution within the specified tolerance level. Given that this geom is frequently expanded, minor deviations of some points outside the ellipses are of minimal concern.\nThis PCA diagram illustrates the different annotating sets.\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggsci)\nlibrary(ggforce)\nlibrary(colorspace)\n\n\nggplot(df, aes(PC1, PC2)) +\n  \n  geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(3, \"mm\"), label.fill = \"transparent\") +\n  \n  geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = \"white\") +\n  \n  scale_fill_manual(\n    values = c(\n      \"IgM\" = \"#990000\",\n      \"IgG\" = \"#004d99\"\n      \n    )\n  ) +\n  \n  scale_x_continuous(limits = c(-55, 55)) +\n  scale_y_continuous(limits = c(-55, 55)) +\n  \n  theme_minimal() +\n  \n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  \n  labs(x = \"PC1 (46.19%)\", y = \"PC2 (10.93%)\")"
  },
  {
    "objectID": "qmd/motif_visualization.html",
    "href": "qmd/motif_visualization.html",
    "title": "Motif visualization",
    "section": "",
    "text": "Visualization of motifs aids in identifying distinct patterns and discerning those that are more often, providing valuable insights into immune system dynamics."
  },
  {
    "objectID": "qmd/motif_visualization.html#table-data-format",
    "href": "qmd/motif_visualization.html#table-data-format",
    "title": "Motif visualization",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for motif visualizations. The table includes mock data specifically generated for this purpose.\nThe “Sample” column contains unique identifiers for each sample, while the “position” column provides information about the position of each amino acids. The “refAA” column corresponds to the reference amino acid and the “altAA” contains the alterations. “Freq. (clonotypes)” column indicates how often changes occur and “region” column refers to the spot where alteration happend. In “altChemical” column there are information about the alternative chemical properties of each amino acid and “hotspot” column notes if an amino acid is in a highly mutable area.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/mutation1.tsv\") \n\n\nreactable(\n  \n  df, \n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/motif_visualization.html#chord-diagram",
    "href": "qmd/motif_visualization.html#chord-diagram",
    "title": "Motif visualization",
    "section": "Chord diagram",
    "text": "Chord diagram\nChord diagrams provide a circular visualization of relationships between multiple entities (nodes) through interconnected links.\nEach entity is represented by a segment on the outer perimeter of the circular layout, with arcs drawn between them to show connections.\nThe size of each arc corresponds to the significance of the flow between the respective entities.\nChord diagrams can be constructed using the chordDiagram() function from the circlize package.\n\nChord diagram 1\nThis chord diagram illustrates the different recobinations between IGLJ genes and IGLV genes.\n\n\nCode\nlibrary(stringr)\n\nlibrary(ggplot2)\nlibrary(ggtext)\n\nlibrary(ggh4x)\n\nlibrary(shadowtext)\nlibrary(paletteer)\n\n\ndf$altAA_l = ifelse(\n    df$`Freq. (clonotypes)` &gt;= .05,\n    df$altAA, \" \"\n)\n\ndf$refAA = paste0(\"&lt;span style='color:\", df$hotspot, \"'&gt;\", df$refAA, \"&lt;/span&gt;\") |&gt;\n    str_replace_all(\"nonhotspot\", \"grey\") |&gt;\n    str_replace_all(\"hotspot\", \"red\")\n\nq_r = df[, c(\"position\", \"region\", \"refAA\"), with = FALSE] |&gt; unique()\nq_r = df[, by = .(position, region), .(refAA = refAA |&gt; paste(collapse = \"&lt;br&gt;\"))]\n\n\n# plot-----------------\n\ndf |&gt;\n    ggplot(aes(position, `Freq. (clonotypes)`, fill = altChemical)) + \n    \n    geom_richtext(\n        data = q_r, aes(position, -.01, label = refAA),\n        vjust = 1, size = 4, inherit.aes = FALSE, \n        fill = NA, label.size = NA,  fontface = \"bold\"\n    ) +\n    \n    geom_col(color = \"grey75\", linewidth = .15) +\n    \n    geom_shadowtext(\n        aes(label = altAA_l),\n        position = position_stack(vjust = .5),\n        bg.color = \"grey96\", color = \"grey10\",\n        fontface = \"bold\"\n    ) +\n    \n    scale_x_continuous(breaks = seq(1, 108, by = 5)) +\n    \n    scale_y_continuous(\n        expand = c(0, 0), \n        limits = c(-.06, .6),\n        breaks = c(.05, .15, .25, .5, .75, .95), \n        minor_breaks = c(.1, .2, .3, .35, .8),\n        labels = scales::percent\n    ) +\n    \n    scale_fill_manual(\n        values = paletteer_d(\"ggsci::hallmarks_light_cosmic\"),\n        guide = guide_legend(nrow = 1)\n    ) +\n    \n    facet_grid2(cols = vars(region), rows = vars(Sample),\n                space = \"free_x\", scales = \"free_x\", axes = \"x\") +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 12),\n\n        axis.title.x = element_blank(),\n        axis.title.y = element_text(size = 15),\n        axis.line.x = element_line(linewidth = .35),\n        axis.ticks.x = element_line(linewidth = .35),\n        \n        strip.text = element_text(face = \"bold\"),\n        \n        panel.spacing = unit(1, \"lines\"),\n        \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        \n        panel.grid.major.y = element_line(linewidth = .35, color = \"grey80\"),\n        panel.grid.minor.y = element_line(linewidth = .3, linetype = \"dashed\", color = \"grey80\"),\n        \n        plot.margin = margin(20, 20, 20, 20)\n    )"
  },
  {
    "objectID": "qmd/motif_visualization.html#motif-plot-1",
    "href": "qmd/motif_visualization.html#motif-plot-1",
    "title": "Motif visualization",
    "section": "Motif plot 1",
    "text": "Motif plot 1\nChord diagrams provide a circular visualization of relationships between multiple entities (nodes) through interconnected links.\nEach entity is represented by a segment on the outer perimeter of the circular layout, with arcs drawn between them to show connections.\nThe size of each arc corresponds to the significance of the flow between the respective entities.\nChord diagrams can be constructed using the chordDiagram() function from the circlize package.\n\nChord diagram 1\nThis chord diagram illustrates the different recobinations between IGLJ genes and IGLV genes.\n\n\nCode\nlibrary(stringr)\n\nlibrary(ggplot2)\nlibrary(ggtext)\n\nlibrary(ggh4x)\n\nlibrary(shadowtext)\nlibrary(paletteer)\n\n\ndf$altAA_l = ifelse(\n    df$`Freq. (clonotypes)` &gt;= .05,\n    df$altAA, \" \"\n)\n\ndf$refAA = paste0(\"&lt;span style='color:\", df$hotspot, \"'&gt;\", df$refAA, \"&lt;/span&gt;\") |&gt;\n    str_replace_all(\"nonhotspot\", \"grey\") |&gt;\n    str_replace_all(\"hotspot\", \"red\")\n\nq_r = df[, c(\"position\", \"region\", \"refAA\"), with = FALSE] |&gt; unique()\nq_r = df[, by = .(position, region), .(refAA = refAA |&gt; paste(collapse = \"&lt;br&gt;\"))]\n\n\n# plot-----------------\n\ndf |&gt;\n    ggplot(aes(position, `Freq. (clonotypes)`, fill = altChemical)) + \n    \n    geom_richtext(\n        data = q_r, aes(position, -.01, label = refAA),\n        vjust = 1, size = 4, inherit.aes = FALSE, \n        fill = NA, label.size = NA,  fontface = \"bold\"\n    ) +\n    \n    geom_col(color = \"grey75\", linewidth = .15) +\n    \n    geom_shadowtext(\n        aes(label = altAA_l),\n        position = position_stack(vjust = .5),\n        bg.color = \"grey96\", color = \"grey10\",\n        fontface = \"bold\"\n    ) +\n    \n    scale_x_continuous(breaks = seq(1, 108, by = 5)) +\n    \n    scale_y_continuous(\n        expand = c(0, 0), \n        limits = c(-.06, .6),\n        breaks = c(.05, .15, .25, .5, .75, .95), \n        minor_breaks = c(.1, .2, .3, .35, .8),\n        labels = scales::percent\n    ) +\n    \n    scale_fill_manual(\n        values = paletteer_d(\"ggsci::hallmarks_light_cosmic\"),\n        guide = guide_legend(nrow = 1)\n    ) +\n    \n    facet_grid2(cols = vars(region), rows = vars(Sample),\n                space = \"free_x\", scales = \"free_x\", axes = \"x\") +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 12),\n\n        axis.title.x = element_blank(),\n        axis.title.y = element_text(size = 15),\n        axis.line.x = element_line(linewidth = .35),\n        axis.ticks.x = element_line(linewidth = .35),\n        \n        strip.text = element_text(face = \"bold\"),\n        \n        panel.spacing = unit(1, \"lines\"),\n        \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        \n        panel.grid.major.y = element_line(linewidth = .35, color = \"grey80\"),\n        panel.grid.minor.y = element_line(linewidth = .3, linetype = \"dashed\", color = \"grey80\"),\n        \n        plot.margin = margin(20, 20, 20, 20)\n    )"
  },
  {
    "objectID": "qmd/motif_visualization.html#motif-plot-1-1",
    "href": "qmd/motif_visualization.html#motif-plot-1-1",
    "title": "Motif visualization",
    "section": "Motif plot 1",
    "text": "Motif plot 1"
  },
  {
    "objectID": "qmd/motif_visualization.html#motif-plots",
    "href": "qmd/motif_visualization.html#motif-plots",
    "title": "Motif visualization",
    "section": "",
    "text": "Visualization of motifs aids in identifying distinct patterns and discerning those that are more often, providing valuable insights into immune system dynamics."
  },
  {
    "objectID": "qmd/motif_visualization.html#motif-plot-2",
    "href": "qmd/motif_visualization.html#motif-plot-2",
    "title": "Motif visualization",
    "section": "Motif plot 2",
    "text": "Motif plot 2"
  },
  {
    "objectID": "qmd/motif_visualization.html#motif-plot",
    "href": "qmd/motif_visualization.html#motif-plot",
    "title": "Motif visualization",
    "section": "Motif plot",
    "text": "Motif plot\nMotif plots can be constructed using the geom_richtext() and geom_col() functions from the ggplot2 package.\n\nMotif plot 1\nThis plot illustrates the different sequence motifs at specific regions.\n\n\nCode\nlibrary(stringr)\n\nlibrary(ggplot2)\nlibrary(ggtext)\n\nlibrary(ggh4x)\n\nlibrary(shadowtext)\nlibrary(paletteer)\n\n\ndf$altAA_l = ifelse(\n    df$`Freq. (clonotypes)` &gt;= .05,\n    df$altAA, \" \"\n)\n\ndf$refAA = paste0(\"&lt;span style='color:\", df$hotspot, \"'&gt;\", df$refAA, \"&lt;/span&gt;\") |&gt;\n    str_replace_all(\"nonhotspot\", \"grey\") |&gt;\n    str_replace_all(\"hotspot\", \"red\")\n\nq_r = df[, c(\"position\", \"region\", \"refAA\"), with = FALSE] |&gt; unique()\nq_r = df[, by = .(position, region), .(refAA = refAA |&gt; paste(collapse = \"&lt;br&gt;\"))]\n\n\n# plot-----------------\n\ndf |&gt;\n    ggplot(aes(position, `Freq. (clonotypes)`, fill = altChemical)) + \n    \n    geom_richtext(\n        data = q_r, aes(position, -.01, label = refAA),\n        vjust = 1, size = 3.2, inherit.aes = FALSE, \n        fill = NA, label.size = NA,  fontface = \"bold\"\n    ) +\n    \n    geom_col(color = \"grey75\", linewidth = .15, width = 1.2) +\n    \n    geom_shadowtext(\n        aes(label = altAA_l),\n        position = position_stack(vjust = .25),\n        bg.color = \"grey96\", color = \"grey10\",\n        fontface = \"bold\"\n    ) +\n    \n    scale_x_continuous(breaks = seq(1, 108, by = 5)) +\n    \n    scale_y_continuous(\n        expand = c(0, 0), \n        limits = c(-.06, .6),\n        breaks = c(.05, .15, .25, .5, .75, .95), \n        minor_breaks = c(.1, .2, .3, .35, .8),\n        labels = scales::percent\n    ) +\n    \n    scale_fill_manual(\n        values = paletteer_d(\"ggsci::hallmarks_light_cosmic\"),\n        guide = guide_legend(nrow = 1)\n    ) +\n    \n    facet_grid2(cols = vars(region), rows = vars(Sample),\n                space = \"free_x\", scales = \"free_x\",\n                axes = \"x\") +\n    \n    theme_minimal() +\n    \n    theme(\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 15),\n\n        axis.title.x = element_blank(),\n        axis.text.y = element_text(size = 12),\n        axis.title.y = element_text(size = 15),\n        axis.line.x = element_line(linewidth = .35),\n        axis.ticks.x = element_line(linewidth = .35),\n        \n        strip.text = element_text(face = \"bold\", size = 15),\n        \n        panel.spacing = unit(1, \"lines\"),\n        \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        \n        panel.grid.major.y = element_line(linewidth = .35, color = \"grey80\"),\n        panel.grid.minor.y = element_line(linewidth = .3, linetype = \"dashed\", color = \"grey80\"),\n        \n        plot.margin = margin(20, 20, 20, 20)\n    )\n\n\n\n\n\n\n\n\n\n\n\nMotif plot 2\nAn alternative method for creating sequence logos involves using the ggplot() function with geom_logo().\n\n\nCode\n# Load the required packages\nlibrary(ggplot2)\nlibrary(ggseqlogo)\n\n# Some sample data\ndata(ggseqlogo_sample)\n\n\nggplot() + \n  \n  geom_logo(seqs_dna$MA0001.1, method = 'prob') + \n  \n  #labs(size = 100) +\n  \n  \n  theme_logo() +\n  \n  theme(\n    axis.text = element_text(size = 12),\n    axis.title.y = element_text(size = 15),\n    plot.margin = margin(t = 50, r = 5, b = 50, l = 5)\n        )"
  },
  {
    "objectID": "qmd/motif_visualization.html#table-data-format-1",
    "href": "qmd/motif_visualization.html#table-data-format-1",
    "title": "Motif visualization",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for motif visualizations. The table includes mock data specifically generated for this purpose.\n\n\nCode\n# Load the required packages\nlibrary(ggplot2)\nlibrary(ggseqlogo)\n\n# Some sample data\ndata(ggseqlogo_sample)\n\n\nggplot() + geom_logo( seqs_dna$MA0001.1 ) + theme_logo()"
  },
  {
    "objectID": "qmd/bubble_plot.html",
    "href": "qmd/bubble_plot.html",
    "title": "Bubble plot",
    "section": "",
    "text": "A bubble plot is essentially a scatterplot where a third numeric variable determines the size of the circles.\nA scatterplot illustrates the relationship between two numeric variables. Each dot represents an observation, with its position on the X (horizontal) and Y (vertical) axes indicating the values of the two variables."
  },
  {
    "objectID": "qmd/bubble_plot.html#table-data-format",
    "href": "qmd/bubble_plot.html#table-data-format",
    "title": "Bubble plot",
    "section": "Table (Data format)",
    "text": "Table (Data format)\nThis is an example of a data format containing the necessary information for bubble plot visualizations. The table includes mock data specifically generated for this purpose.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/bubble_plot.txt\") \n\n\nreactable(\n  \n  df, \n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/bubble_plot.html#bubble-plot",
    "href": "qmd/bubble_plot.html#bubble-plot",
    "title": "Bubble plot",
    "section": "Bubble plot",
    "text": "Bubble plot\nThe ggplot2 package enables the creation of bubble charts using the geom_point() function.\nThis plot contains different pathways. The size of the bubble depends on the count and the color of the bubble depends on the -log(p.adj).\n\n\nCode\n# libraries -------\nlibrary(ggplot2)\n\nggplot(data = df) +\n  \n  geom_point(\n    aes(x = NES, y = Description,\n        size = `Count`, \n        fill = log_padj\n        ),\n    \n    shape = 21, stroke = .25\n  ) +\n  \n  scale_size_continuous(range = c(2, 7)) +\n  \n  scale_fill_gradient(\n    low = \"grey\", high = \"#f30000\",\n    guide = guide_colorbar(\n      title = \"-log10(p.adj)\",\n      barheight = unit(10, \"lines\"),\n      barwidth = unit(.75, \"lines\")\n    )\n  ) +\n  \n  theme_minimal() +\n  \n  theme(\n    axis.title.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    \n    panel.grid.major = element_line(linewidth = .4),\n    \n    panel.border = element_rect(fill = NA, linewidth = .4),\n    axis.ticks = element_line(linewidth = .4),\n    \n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  \n  facet_grid(\n    rows = vars(Group),\n    scales = \"free_y\",\n    space = \"free_y\")"
  },
  {
    "objectID": "qmd/heatmap.html",
    "href": "qmd/heatmap.html",
    "title": "Heatmap",
    "section": "",
    "text": "A heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors."
  },
  {
    "objectID": "qmd/heatmap.html#table-1-data-format",
    "href": "qmd/heatmap.html#table-1-data-format",
    "title": "Heatmap",
    "section": "Table 1 (Data format)",
    "text": "Table 1 (Data format)\nThis is an example of a data format containing the necessary information for heatmap visualizations. The table includes mock data specifically generated for this purpose.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\nann &lt;- fread(\"../inst/data/ann.txt\") \n\n\nreactable(\n  \n  ann, \n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/heatmap.html#table-2-data-format",
    "href": "qmd/heatmap.html#table-2-data-format",
    "title": "Heatmap",
    "section": "Table 2 (Data format)",
    "text": "Table 2 (Data format)\nThis is an example of a data format containing the necessary information for heatmap visualizations. The table includes mock data specifically generated for this purpose.\n\n\nCode\nlibrary(data.table)\nlibrary(reactable)\n\ndf &lt;- fread(\"../inst/data/gene_counts.txt\") \n\nmm = df[, ann$Sample, with = FALSE] |&gt; setDF(rownames = df$GeneID) |&gt; as.matrix()\n\nzmat = mm |&gt; t() |&gt; scale(scale = TRUE, center = TRUE) |&gt; t()\n\nreactable(\n  \n  zmat, \n  defaultPageSize = 5,\n  theme = reactableTheme(\n    backgroundColor  = \"#d9e3f1\"\n  )\n)"
  },
  {
    "objectID": "qmd/heatmap.html#heatmap",
    "href": "qmd/heatmap.html#heatmap",
    "title": "Heatmap",
    "section": "Heatmap",
    "text": "Heatmap\n\n\nCode\n# libraries -------\nlibrary(ComplexHeatmap)\nlibrary(ggplotify)\nlibrary(ggplot2)\n\nht = Heatmap(\n    zmat, name = \"Z-score\",\n    \n    border = TRUE,\n    \n    clustering_distance_columns = \"euclidean\",\n    clustering_distance_rows = \"euclidean\",\n    \n    clustering_method_columns = \"ward.D2\",\n    clustering_method_rows = \"ward.D2\",\n    \n    column_split = ann$Group1,\n    row_split = 2,\n    \n    row_names_gp = gpar(fontsize = 4)\n)\n\n\nht |&gt; \n    draw(merge_legends = TRUE, background = \"transparent\") |&gt;\n    grid.grabExpr() |&gt;\n    as.ggplot()"
  },
  {
    "objectID": "qmd/heatmap.html#heatmap-plot",
    "href": "qmd/heatmap.html#heatmap-plot",
    "title": "Heatmap",
    "section": "Heatmap plot",
    "text": "Heatmap plot\nThe heatmap() function is a built-in feature of R, providing a powerful tool for generating high-quality heatmaps from matrices. It includes statistical functionalities to normalize input data, perform clustering algorithms and visualize the results\n\n\nCode\n# libraries -------\nlibrary(ComplexHeatmap)\nlibrary(ggplotify)\nlibrary(ggplot2)\n\nht = Heatmap(\n    zmat, name = \"Z-score\",\n    \n    border = TRUE,\n    \n    clustering_distance_columns = \"euclidean\",\n    clustering_distance_rows = \"euclidean\",\n    \n    clustering_method_columns = \"ward.D2\",\n    clustering_method_rows = \"ward.D2\",\n    \n    column_split = ann$Group1,\n    row_split = 2,\n    \n    row_names_gp = gpar(fontsize = 4)\n)\n\n\nht |&gt; \n    draw(merge_legends = TRUE, background = \"transparent\") |&gt;\n    grid.grabExpr() |&gt;\n    as.ggplot()"
  }
]